// Code generated by mockery v2.24.0. DO NOT EDIT.

package mocks

import (
	libcnb "github.com/buildpacks/libcnb"
	mock "github.com/stretchr/testify/mock"
)

// Builder is an autogenerated mock type for the Builder type
type Builder struct {
	mock.Mock
}

// Build provides a mock function with given fields: context
func (_m *Builder) Build(context libcnb.BuildContext) (libcnb.BuildResult, error) {
	ret := _m.Called(context)

	var r0 libcnb.BuildResult
	var r1 error
	if rf, ok := ret.Get(0).(func(libcnb.BuildContext) (libcnb.BuildResult, error)); ok {
		return rf(context)
	}
	if rf, ok := ret.Get(0).(func(libcnb.BuildContext) libcnb.BuildResult); ok {
		r0 = rf(context)
	} else {
		r0 = ret.Get(0).(libcnb.BuildResult)
	}

	if rf, ok := ret.Get(1).(func(libcnb.BuildContext) error); ok {
		r1 = rf(context)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewBuilder creates a new instance of Builder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBuilder(t mockConstructorTestingTNewBuilder) *Builder {
	mock := &Builder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
